type File_challenge {
  name: String!
  src: String!
}
input File_challengeInput {
  name: String!
  src: String!
}

# same as Files, but for hacking the generator
type Files_challenge {
  files: [File_challenge]!
}

input Files_challengeInput {
  files: [File_challengeInput]!
}

type Sponsor {
  image: String
  src: String
  name: String
}

input SponsorInput {
  image: String
  src: String
  name: String
}
type Challenger {
  correct: Boolean
  answer: Int
  challenger: ID
  challenge: ID
}

interface Challenge {
  subject: String
  description: String
  answers: [String!]
  correct: Int
  sponsors: [Sponsor]
  isActive: Boolean
  media: [Files_challenge]
  winnersNumber: Int
  loosersNumber: Int
}

type ChallengeType {
  subject: String
  description: String
  answers: [String!]
  correct: Int
  sponsors: [Sponsor]
  isActive: Boolean
  media: [Files_challenge]
  winnersNumber: Int
  loosersNumber: Int
}

type GetChallengeType {
  subject: String
  description: String
  answers: [String!]
  sponsors: [Sponsor]
  isActive: Boolean
  media: [Files_challenge]
  winnersNumber: Int
  loosersNumber: Int
}

type GetChallenge {
  subject: String
  description: String
  answers: [String!]
  sponsors: [Sponsor]
  isActive: Boolean
  media: [Files_challenge]
  winnersNumber: Int
  loosersNumber: Int
  answer: Int
}

type GetChallengersSuperAdmin {
  winners: [Challenger]
  loosers: [Challenger]
}
input GetChallengersSuperAdminInput {
  challenge: ID!
  pageNum: Int!
  pageSize: Int!
}

extend type Query {
  getChallenge(input: ID!): GetChallenge!
  getChallengesSuperAdmin: [GetChallengeType]!
  # input: challenge id
  getChallengersSuperAdmin(
    input: GetChallengersSuperAdminInput!
  ): GetChallengersSuperAdmin!
}

input CreateChallengeInput {
  subject: String
  description: String
  answers: [String!]
  correct: Int
  sponsors: [SponsorInput]
  media: [Files_challengeInput]
}
type IsAnswerRight {
  correct: Boolean
}

input SendAnswerInput {
  answer: Int!
  challenge: ID!
}

extend type Mutation {
  createChallenge(input: CreateChallengeInput!): GetChallengeType!
  disableChallenge(input: ID!): GetChallengeType!
  deleteChallenge(input: ID!): GetChallengeType!
  sendAnswer(input: SendAnswerInput!): IsAnswerRight!
}
