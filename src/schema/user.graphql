enum GuideType {
  LOCAL
  NATIONAL
}

enum Expertise {
  CULTURAL
  NATURE
}

enum UserType {
  Ambassador
  User
  SuperAdmin
}

enum Registerations {
  Email
  PhoneNumber
}

interface User {
  _id: ID!
  name: String
  userName: String
  email: String
  phoneNumber: String
  image: String
  description: String
  usersOfIdentifierCode: [String]!
  identifierCode: String
  ICUsers: [ID]!
  type: UserType!
  isAmbassador: Boolean
  registerations: Registerations
  archives: [ID]!
  points: Int!

  nationalCode: String
  instagram: String
  touristGuideCard: String
  guideType: GuideType
  expertise: Expertise
}

type User_type {
  _id: ID!
  name: String
  email: String
  image: String
  description: String
  ICUsers: [ID]!
  type: UserType!
  isAmbassador: Boolean
  archives: [ID]!
}
type Response {
  _id: ID!
  token: String!
  type: UserType!
}

input CreateUserInput {
  email: String
  phoneNumber: String
  code: String!
  type: UserType!
  # don't use this until you want to be a global admin
  password: String
}

# input MakeAmbassadorInput {
#   _id: ID!
#   nationalCode: String!
#   instagram: String
#   touristGuideCard: String!
#   guideType: GuideType!
#   expertise: Expertise!
# }

input MutateUserInput {
  _id: ID!
  name: String
  userName: String
  email: String
  phoneNumber: String
  image: String
  description: String
  identifierCode: String
}

input MutateAmbassadorInput {
  _id: ID!
  name: String
  userName: String
  email: String
  phoneNumber: String
  image: String
  description: String
  identifierCode: String

  nationalCode: String
  instagram: String
  touristGuideCard: String
  guideType: GuideType
  expertise: Expertise
}

input SendCodeInput {
  email: String
  phoneNumber: String
}

type Entries {
  messageid: Int
  message: String
  status: Int
  statustext: String
  sender: String
  receptor: String
  date: Int
  cost: Int
}

type SmsResponse {
  status: Int!
  message: String!
}

type SendCodeResponse {
  sms: SmsResponse
}

type GoogleRedirectResponse {
  url: String!
}

type CreateGoogleUserResponse {
  email: String!
  _id: ID!
  token: String!
  type: UserType!
}

input CreateGoogleUserInput {
  type: UserType!
  token: String!
}

type GetUserInfoResponse {
  _id: ID!
  name: String
  userName: String
  email: String
  phoneNumber: String
  image: String
  description: String
  usersOfIdentifierCode: [String]
  identifierCode: String
  ICUsers: [ID]
  type: UserType
  points: Int
  pathsNumber: Int

  nationalCode: String
  instagram: String
  touristGuideCard: String
  guideType: GuideType
  expertise: Expertise
}

type Notification {
  title: String!
  description: String!
  type: UserType!
}

input NotificationInput {
  title: String!
  description: String!
  type: UserType!
}

type NotificationResponse {
  done: Boolean!
}

extend type Query {
  "input is `redirect` url that google redirects to, with a string"
  getGoogleRedirect(input: String): GoogleRedirectResponse!
  getUserInfo(input: ID!): GetUserInfoResponse!
  getNotifications(input: UserType): [Notification]!
  getPopularAmbassadors: [User_type]!
  getAmbassadors: [User_type]!
}

type ResetIdentifierCodeResponse {
  identifierCode: String
}

extend type Mutation {
  createUser(input: CreateUserInput!): Response!
  sendCode(input: SendCodeInput!): SendCodeResponse!
  createGoogleUser(input: CreateGoogleUserInput!): CreateGoogleUserResponse!
  mutateUser(input: MutateUserInput): Response!
  mutateAmbassador(input: MutateAmbassadorInput): Response!
  sendNotification(input: NotificationInput): NotificationResponse!
  resetIdentifierCode: ResetIdentifierCodeResponse!
  activateAmbassador(input: ID!): User_type!
}
